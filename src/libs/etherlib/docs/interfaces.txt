readFromJson, readFromBinary, writeToJson, writeToBinary, verifyBlock


//-------------------------------------------------------------------------
extern void     etherlib_init           (const SFString& client);
extern void     etherlib_cleanup        (void);


//-------------------------------------------------------------------------
typedef bool ( *BLOCKVISITFUNC   )(CBlock& block,       void *data);
typedef bool ( *TRANSVISITFUNC   )(CTransaction& trans, void *data);
typedef bool ( *ACCOUNTVISITFUNC )(CAccount& acct,      void *data);

//-------------------------------------------------------------------------
inline bool forEveryBlockFromClient      (BLOCKVISITFUNC func, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);
extern bool forEveryBlockOnDisc          (BLOCKVISITFUNC func, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);
extern bool forEveryEmptyBlockOnDisc     (BLOCKVISITFUNC func, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);
extern bool forEveryNonEmptyBlockOnDisc  (BLOCKVISITFUNC func, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);

//-------------------------------------------------------------------------
extern bool forEveryTransaction          (TRANSVISITFUNC func, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);
extern bool forEveryTransactionTo        (TRANSVISITFUNC func, CAccount& account, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);
extern bool forEveryTransactionFrom      (TRANSVISITFUNC func, CAccount& account, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);
extern bool forEveryTransactionToOrFrom  (TRANSVISITFUNC func, CAccount& account, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);

//-------------------------------------------------------------------------
extern bool forEveryAccount              (ACCOUNTVISITFUNC account, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);

//-------------------------------------------------------------------------
typedef bool (*MINIBLOCKVISITFUNC)(CMiniBlock& block, const CMiniTrans *trans, void *data);
typedef bool (*MINITRANSVISITFUNC)(CMiniTrans& trans, void *data);

//-------------------------------------------------------------------------
extern bool forEveryFullBlockInMemory      (BLOCKVISITFUNC     func, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);
extern bool forEveryMiniBlockInMemory      (MINIBLOCKVISITFUNC func, void *data, SFUint32 start=0, SFUint32 count=(SFUint32)-1);

//-------------------------------------------------------------------------
extern bool visitBlock(CBlock& block, void *data);
extern bool visitMini (CMiniBlock& block, const CMiniTrans *trans, void *data);

//-------------------------------------------------------------------------
class CBlockVisitor
{
public:
	CBlockVisitor(SFUint32 fb, SFUint32 c) : m_firstBlock(fb), m_cnt(c) { }
	SFUint32 firstBlock() const { return m_firstBlock; }
	SFUint32 getCount() const { return m_cnt; }

protected:
	SFUint32 m_firstBlock;
	SFUint32 m_cnt;

private:
	CBlockVisitor(void) : m_firstBlock(0), m_cnt(0) { }
};

// Syntactic Sugar
//-------------------------------------------------------------------------
inline void   forEveryBlockFromClient    (BLOCKVISITFUNC     func, CBlockVisitor *bv) { forEveryBlockOnDisc        (func, bv, bv->firstBlock(), bv->getCount()); }
inline void   forEveryBlockOnDisc        (BLOCKVISITFUNC     func, CBlockVisitor *bv) { forEveryBlockOnDisc        (func, bv, bv->firstBlock(), bv->getCount()); }
inline void   forEveryNonEmptyBlockOnDisc(BLOCKVISITFUNC     func, CBlockVisitor *bv) { forEveryNonEmptyBlockOnDisc(func, bv, bv->firstBlock(), bv->getCount()); }
inline void   forEveryFullBlockInMemory  (BLOCKVISITFUNC     func, CBlockVisitor *bv) { forEveryFullBlockInMemory  (func, bv, bv->firstBlock(), bv->getCount()); }
inline void   forEveryMiniBlockInMemory  (MINIBLOCKVISITFUNC func, CBlockVisitor *bv) { forEveryMiniBlockInMemory  (func, bv, bv->firstBlock(), bv->getCount()); }







//-------------------------------------------------------------------------
extern SFString compileSolidity         (const SFString& sol, const SFString& id="");
extern SFString getClientVersion        (const SFString& id="");
extern SFUint32 getLatestBlock          (const SFString& id="");

//-------------------------------------------------------------------------
extern bool     getCode                 (CAccount& acct,      const SFString& addr, const SFString& id="");
extern bool     getSha3                 (const SFString& hexIn, SFString& shaOut, const SFString& id="");

//-------------------------------------------------------------------------
extern bool     getBlock                (CBlock& block,       const SFString& num,  const SFString& id="");
inline bool     getBlock                (CBlock& block,       SFUint32 num,         const SFString& id="") { return getBlock(block, asString(num), id); }
extern bool     getTransaction          (CTransaction& trans, const SFString& hash, const SFString& id="");
extern bool     getReceipt              (CReceipt& receipt,   const SFString& hash, const SFString& id="");
extern bool     getLogEntry             (CLogEntry& log,      const SFString& hash, const SFString& id="");
extern bool     getTrace                (CTrace& traces,      const SFString& hash, const SFString& id="");

//-------------------------------------------------------------------------
extern bool     queryBlock              (CBlock& block,       const SFString& num,  const SFString& id, bool needTrace);
extern bool     queryRawBlock           (SFString& block,     const SFString& num,  const SFString& id, bool needTrace);

